/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class MyThriftService
{
    public interface Iface
    {
        string Connect(string gameName, string releaseName, int instanceId, string hash);
        string Settings_get(string gameSession, string key);
        string UserInfo_get(string gameSession);
        string Auth_getGameTokenWithWindowId_get(string gameSession, int gameId, int windowId);
    }

    public class Client : IDisposable, Iface
    {
        public Client(TProtocol prot)
            : this(prot, prot)
        {
        }

        public Client(TProtocol iprot, TProtocol oprot)
        {
            iprot_ = iprot;
            oprot_ = oprot;
        }

        protected TProtocol iprot_;
        protected TProtocol oprot_;
        protected int seqid_;

        public TProtocol InputProtocol
        {
            get { return iprot_; }
        }
        public TProtocol OutputProtocol
        {
            get { return oprot_; }
        }


        #region " IDisposable Support "
        private bool _IsDisposed;

        // IDisposable
        public void Dispose()
        {
            Dispose(true);
        }


        protected virtual void Dispose(bool disposing)
        {
            if (!_IsDisposed)
            {
                if (disposing)
                {
                    if (iprot_ != null)
                    {
                        ((IDisposable)iprot_).Dispose();
                    }
                    if (oprot_ != null)
                    {
                        ((IDisposable)oprot_).Dispose();
                    }
                }
            }
            _IsDisposed = true;
        }
        #endregion

        public string Connect(string gameName, string releaseName, int instanceId, string hash)
        {
            send_Connect(gameName, releaseName, instanceId, hash);
            return recv_Connect();
        }
        public void send_Connect(string gameName, string releaseName, int instanceId, string hash)
        {
            oprot_.WriteMessageBegin(new TMessage("connect", TMessageType.Call, seqid_));
            Connect_args args = new Connect_args();
            args.GameName = gameName;
            args.ReleaseName = releaseName;
            args.InstanceId = instanceId;
            args.Hash = hash;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
            oprot_.Transport.Flush();
        }
        public string recv_Connect()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Connect_result result = new Connect_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSum failed: unknown result");
        }

        public string Settings_get(string gameSession, string key)
        {
            send_Settings_get(gameSession, key);
            return recv_Settings_get();
        }
        public void send_Settings_get(string gameSession, string key)
        {
            oprot_.WriteMessageBegin(new TMessage("settings_get", TMessageType.Call, seqid_));
            Settings_get_args args = new Settings_get_args();
            args.GameSession = gameSession;
            args.Key = key;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
            oprot_.Transport.Flush();
        }
        public string recv_Settings_get()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Settings_get_result result = new Settings_get_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSum failed: unknown result");
        }

        public string UserInfo_get(string gameSession)
        {
            send_UserInfo_get(gameSession);
            return recv_UserInfo_get();
        }
        public void send_UserInfo_get(string gameSession)
        {
            oprot_.WriteMessageBegin(new TMessage("userInfo_get", TMessageType.Call, seqid_));
            UserInfo_get_args args = new UserInfo_get_args();
            args.GameSession = gameSession;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
            oprot_.Transport.Flush();
        }
        public string recv_UserInfo_get()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            UserInfo_get_result result = new UserInfo_get_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSum failed: unknown result");
        }

        public string Auth_getGameTokenWithWindowId_get(string gameSession, int gameId, int windowId)
        {
            send_Auth_getGameTokenWithWindowId_get(gameSession, gameId, windowId);
            return recv_Auth_getGameTokenWithWindowId_get();
        }
        public void send_Auth_getGameTokenWithWindowId_get(string gameSession, int gameId, int windowId)
        {
            oprot_.WriteMessageBegin(new TMessage("auth_getGameToken", TMessageType.Call, seqid_));
            Auth_getGameTokenWithWindowId_get_args args = new Auth_getGameTokenWithWindowId_get_args();
            args.GameSession = gameSession;
            args.GameId = gameId;
            args.WindowId = windowId;
            args.Write(oprot_);
            oprot_.WriteMessageEnd();
            oprot_.Transport.Flush();
        }
        public string recv_Auth_getGameTokenWithWindowId_get()
        {
            TMessage msg = iprot_.ReadMessageBegin();
            if (msg.Type == TMessageType.Exception)
            {
                TApplicationException x = TApplicationException.Read(iprot_);
                iprot_.ReadMessageEnd();
                throw x;
            }
            Auth_getGameTokenWithWindowId_get_result result = new Auth_getGameTokenWithWindowId_get_result();
            result.Read(iprot_);
            iprot_.ReadMessageEnd();
            if (result.__isset.success)
            {
                return result.Success;
            }
            throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Auth_getGameTokenWithWindowId_get failed: unknown result");
        }
    }
    public class Processor : TProcessor
    {
        public Processor(Iface iface)
        {
            iface_ = iface;
            processMap_["connect"] = Connect_Process;
            processMap_["settings_get"] = Settings_get_Process;
            processMap_["userInfo_get"] = UserInfo_get_Process;
            processMap_["auth_getGameToken"] = Auth_getGameTokenWithWindowId_get_Process;
        }

        protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
        private Iface iface_;
        protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

        public bool Process(TProtocol iprot, TProtocol oprot)
        {
            try
            {
                TMessage msg = iprot.ReadMessageBegin();
                Console.WriteLine(msg.Name);
                ProcessFunction fn;
                processMap_.TryGetValue(msg.Name, out fn);
                if (fn == null)
                {
                    TProtocolUtil.Skip(iprot, TType.Struct);
                    iprot.ReadMessageEnd();
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                    oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                    x.Write(oprot);
                    oprot.WriteMessageEnd();
                    oprot.Transport.Flush();
                    return true;
                }
                fn(msg.SeqID, iprot, oprot);
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }

        public void Connect_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Connect_args args = new Connect_args();
            args.Read(iprot);
            Console.WriteLine(args.ToString());
            iprot.ReadMessageEnd();
            Connect_result result = new Connect_result();
            result.Success = iface_.Connect(args.GameName, args.ReleaseName, args.InstanceId, args.Hash);
            Console.WriteLine(result.ToString());
            oprot.WriteMessageBegin(new TMessage("connect", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void Settings_get_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Settings_get_args args = new Settings_get_args();
            args.Read(iprot);
            Console.WriteLine(args.ToString());
            iprot.ReadMessageEnd();
            Settings_get_result result = new Settings_get_result();
            result.Success = iface_.Settings_get(args.GameSession, args.Key);
            Console.WriteLine(result.ToString());
            oprot.WriteMessageBegin(new TMessage("settings_get", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void UserInfo_get_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            UserInfo_get_args args = new UserInfo_get_args();
            args.Read(iprot);
            Console.WriteLine(args.ToString());
            iprot.ReadMessageEnd();
            UserInfo_get_result result = new UserInfo_get_result();
            result.Success = iface_.UserInfo_get(args.GameSession);
            Console.WriteLine(result.ToString());
            oprot.WriteMessageBegin(new TMessage("userInfo_get", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }

        public void Auth_getGameTokenWithWindowId_get_Process(int seqid, TProtocol iprot, TProtocol oprot)
        {
            Auth_getGameTokenWithWindowId_get_args args = new Auth_getGameTokenWithWindowId_get_args();
            args.Read(iprot);
            Console.WriteLine(args.ToString());
            iprot.ReadMessageEnd();
            Auth_getGameTokenWithWindowId_get_result result = new Auth_getGameTokenWithWindowId_get_result();
            result.Success = iface_.UserInfo_get(args.GameSession);
            Console.WriteLine(result.ToString());
            oprot.WriteMessageBegin(new TMessage("auth_getGameToken", TMessageType.Reply, seqid));
            result.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
        }
    }


    [Serializable]
    public partial class Connect_args : TBase
    {
        private string _gameName;
        private string _releaseName;
        private int _instanceId;
        private string _hash;

        public string GameName
        {
            get
            {
                return _gameName;
            }
            set
            {
                __isset.gameName = true;
                this._gameName = value;
            }
        }

        public string ReleaseName
        {
            get
            {
                return _releaseName;
            }
            set
            {
                __isset.releaseName = true;
                this._releaseName = value;
            }
        }

        public int InstanceId
        {
            get
            {
                return _instanceId;
            }
            set
            {
                __isset.instanceId = true;
                this._instanceId = value;
            }
        }

        public string Hash
        {
            get
            {
                return _hash;
            }
            set
            {
                __isset.hash = true;
                this._hash = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool gameName;
            public bool releaseName;
            public bool instanceId;
            public bool hash;
        }

        public Connect_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            GameName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String)
                        {
                            ReleaseName = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.I32)
                        {
                            InstanceId = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == TType.String)
                        {
                            Hash = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Connect_args");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.gameName)
            {
                field.Name = "gameName";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(GameName);
                oprot.WriteFieldEnd();
            }
            if (__isset.releaseName)
            {
                field.Name = "releaseName";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(GameName);
                oprot.WriteFieldEnd();
            }
            if (__isset.instanceId)
            {
                field.Name = "instanceId";
                field.Type = TType.I32;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(InstanceId);
                oprot.WriteFieldEnd();
            }
            if (__isset.hash)
            {
                field.Name = "hash";
                field.Type = TType.String;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Hash);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Connect_args(");
            bool __first = true;
            if (__isset.gameName)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("gameName: ");
                __sb.Append(GameName);
            }
            if (__isset.releaseName)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("releaseName: ");
                __sb.Append(ReleaseName);
            }
            if (__isset.instanceId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("instanceId: ");
                __sb.Append(InstanceId);
            }
            if (__isset.hash)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("hash: ");
                __sb.Append(Hash);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


    [Serializable]
    public partial class Connect_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool success;
        }

        public Connect_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.String)
                        {
                            Success = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Connect_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success)
            {
                field.Name = "success";
                field.Type = TType.String;
                field.ID = 0;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Success);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Connect_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

    [Serializable]
    public partial class Settings_get_args : TBase
    {
        private string _gameSession;
        private string _key;

        public string GameSession
        {
            get
            {
                return _gameSession;
            }
            set
            {
                __isset.gameSession = true;
                this._gameSession = value;
            }
        }

        public string Key
        {
            get
            {
                return _key;
            }
            set
            {
                __isset.key = true;
                this._key = value;
            }
        }

        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool gameSession;
            public bool key;
        }

        public Settings_get_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            GameSession = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String)
                        {
                            Key = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Settings_get_args");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.gameSession)
            {
                field.Name = "gameSession";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(GameSession);
                oprot.WriteFieldEnd();
            }
            if (__isset.key)
            {
                field.Name = "key";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Key);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Settings_get_args(");
            bool __first = true;
            if (__isset.gameSession)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("gameSession: ");
                __sb.Append(GameSession);
            }
            if (__isset.key)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("key: ");
                __sb.Append(Key);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }


    [Serializable]
    public partial class Settings_get_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool success;
        }

        public Settings_get_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.String)
                        {
                            Success = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Settings_get_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success)
            {
                field.Name = "success";
                field.Type = TType.String;
                field.ID = 0;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Success);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Settings_get_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

    [Serializable]
    public partial class UserInfo_get_args : TBase
    {
        private string _gameSession;

        public string GameSession
        {
            get
            {
                return _gameSession;
            }
            set
            {
                __isset.gameSession = true;
                this._gameSession = value;
            }
        }

        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool gameSession;
        }

        public UserInfo_get_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            GameSession = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("UserInfo_get_args");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.gameSession)
            {
                field.Name = "gameSession";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(GameSession);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("UserInfo_get_args(");
            bool __first = true;
            if (__isset.gameSession)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("gameSession: ");
                __sb.Append(GameSession);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }
    [Serializable]
    public partial class UserInfo_get_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool success;
        }

        public UserInfo_get_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.String)
                        {
                            Success = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("UserInfo_get_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success)
            {
                field.Name = "success";
                field.Type = TType.String;
                field.ID = 0;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Success);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("UserInfo_get_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

    [Serializable]
    public partial class Auth_getGameTokenWithWindowId_get_args : TBase
    {
        private string _gameSession;
        private int _gameId;
        private int _windowId;

        public string GameSession
        {
            get
            {
                return _gameSession;
            }
            set
            {
                __isset.gameSession = true;
                this._gameSession = value;
            }
        }

        public int GameId
        {
            get
            {
                return _gameId;
            }
            set
            {
                __isset.gameId = true;
                this._gameId = value;
            }
        }

        public int WindowId
        {
            get
            {
                return _windowId;
            }
            set
            {
                __isset.windowId = true;
                this._windowId = value;
            }
        }



        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool gameSession;
            public bool gameId;
            public bool windowId;
        }

        public Auth_getGameTokenWithWindowId_get_args()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            GameSession = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.I32)
                        {
                            GameId = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.I32)
                        {
                            WindowId = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Auth_getGameTokenWithWindowId_get_args");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.gameSession)
            {
                field.Name = "gameSession";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(GameSession);
                oprot.WriteFieldEnd();
            }
            if (__isset.gameId)
            {
                field.Name = "gameId";
                field.Type = TType.I32;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(GameId);
                oprot.WriteFieldEnd();
            }
            if (__isset.windowId)
            {
                field.Name = "windowId";
                field.Type = TType.I32;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(WindowId);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Auth_getGameTokenWithWindowId_get_args(");
            bool __first = true;
            if (__isset.gameSession)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("gameSession: ");
                __sb.Append(GameSession);
            }
            if (__isset.gameId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("gameId: ");
                __sb.Append(GameId);
            }
            if (__isset.windowId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("windowId: ");
                __sb.Append(WindowId);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }
    [Serializable]
    public partial class Auth_getGameTokenWithWindowId_get_result : TBase
    {
        private string _success;

        public string Success
        {
            get
            {
                return _success;
            }
            set
            {
                __isset.success = true;
                this._success = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool success;
        }

        public Auth_getGameTokenWithWindowId_get_result()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 0:
                        if (field.Type == TType.String)
                        {
                            Success = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("Auth_getGameTokenWithWindowId_get_result");
            oprot.WriteStructBegin(struc);
            TField field = new TField();

            if (this.__isset.success)
            {
                field.Name = "success";
                field.Type = TType.String;
                field.ID = 0;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Success);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("Auth_getGameTokenWithWindowId_get_result(");
            bool __first = true;
            if (__isset.success)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Success: ");
                __sb.Append(Success);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
